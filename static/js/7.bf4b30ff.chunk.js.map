{"version":3,"sources":["hooks/useMounted.ts","components/authentication/verify-code/VerifyCodeAmplify.tsx","pages/authentication/VerifyCode.tsx"],"names":["useMounted","isMounted","useRef","useEffect","current","VerifyCodeAmplify","mounted","verifyCode","useAuth","location","useLocation","navigate","useNavigate","itemsRef","slice","initialValues","email","state","username","code","submit","validationSchema","Yup","shape","max","required","of","onSubmit","values","a","setErrors","setStatus","setSubmitting","join","console","error","success","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldValue","touched","noValidate","TextField","disabled","fullWidth","margin","value","variant","autoFocus","Boolean","helperText","label","name","onBlur","onChange","type","Typography","color","sx","mb","mt","Box","display","columnGap","gridTemplateColumns","pt","map","ref","i","Array","isArray","length","inputRef","el","onKeyDown","event","focus","Number","isInteger","parseInt","key","onPaste","pasteArray","clipboardData","getData","split","valid","forEach","x","textAlign","FormHelperText","mx","find","undefined","Button","size","VerifyCode","platform","backgroundColor","flexDirection","minHeight","Container","maxWidth","py","justifyContent","Card","background","boxShadow","CardContent","p","alignItems","gutterBottom","height","maxHeight","width","flexGrow","Divider","my","Link","component","RouterLink","to"],"mappings":"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","file":"static/js/7.bf4b30ff.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\nimport type { MutableRefObject } from 'react';\n\nconst useMounted = (): MutableRefObject<boolean> => {\n  const isMounted = useRef(true);\n\n  useEffect(() => (): void => {\n    isMounted.current = false;\n  }, []);\n\n  return isMounted;\n};\n\nexport default useMounted;\n","import { useEffect, useRef } from 'react';\nimport type { FC } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport type { Location } from 'history';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  FormHelperText,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport useAuth from '../../../hooks/useAuth';\nimport useMounted from '../../../hooks/useMounted';\n\ninterface LocationState {\n  username?: string;\n}\n\nconst VerifyCodeAmplify: FC = () => {\n  const mounted = useMounted();\n  const { verifyCode } = useAuth() as any;\n  const location = useLocation() as Location<LocationState>;\n  const navigate = useNavigate();\n  const itemsRef = useRef<any>([]);\n\n  useEffect(() => {\n    itemsRef.current = itemsRef.current.slice(0, 6);\n  }, []);\n\n  return (\n    <Formik\n      initialValues={{\n        email: location.state?.username || '',\n        code: ['', '', '', '', '', ''],\n        submit: null\n      }}\n      validationSchema={\n        Yup\n          .object()\n          .shape({\n            email: Yup\n              .string()\n              .email('Must be a valid email')\n              .max(255)\n              .required('Email is required'),\n            code: Yup\n              .array()\n              .of(Yup.string().required('Code is required'))\n          })\n      }\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }): Promise<void> => {\n        try {\n          await verifyCode(values.email, values.code.join(''));\n\n          navigate('/authentication/login');\n        } catch (err) {\n          console.error(err);\n          if (mounted.current) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        setFieldValue,\n        touched,\n        values\n      }): JSX.Element => (\n        <form\n          noValidate\n          onSubmit={handleSubmit}\n        >\n          {\n            !location.state?.username\n              ? (\n                <TextField\n                  autoFocus\n                  error={Boolean(touched.email && errors.email)}\n                  fullWidth\n                  helperText={touched.email && errors.email}\n                  label=\"Email Address\"\n                  margin=\"normal\"\n                  name=\"email\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  type=\"email\"\n                  value={values.email}\n                  variant=\"outlined\"\n                />\n              )\n              : (\n                <TextField\n                  disabled\n                  fullWidth\n                  margin=\"normal\"\n                  value={location.state.username}\n                  variant=\"outlined\"\n                />\n              )\n          }\n          <Typography\n            color=\"textSecondary\"\n            sx={{\n              mb: 2,\n              mt: 3\n            }}\n            variant=\"subtitle2\"\n          >\n            Verification code\n          </Typography>\n          <Box\n            sx={{\n              display: 'grid',\n              columnGap: '16px',\n              gridTemplateColumns: 'repeat(7, 1fr)',\n              pt: 1\n            }}\n          >\n            {[1, 2, 3, 4, 5, 6].map((ref, i) => (\n              <TextField\n                error={Boolean(\n                  Array.isArray(touched.code)\n                  && touched.code.length === 6\n                  && errors.code\n                )}\n                fullWidth\n                inputRef={(el) => itemsRef.current[i] = el}\n                // eslint-disable-next-line react/no-array-index-key\n                key={`code-${i}`}\n                name={`code[${i}]`}\n                onBlur={handleBlur}\n                onKeyDown={(event) => {\n                  if (event.code === 'ENTER') {\n                    if (values.code[i]) {\n                      setFieldValue(`code[${i}]`, '');\n                      return;\n                    }\n\n                    if (i > 0) {\n                      setFieldValue(`code[${i}]`, '');\n                      itemsRef.current[i - 1].focus();\n                      return;\n                    }\n                  }\n\n                  if (Number.isInteger(parseInt(event.key, 10))) {\n                    setFieldValue(`code[${i}]`, event.key);\n\n                    if (i < 5) {\n                      itemsRef.current[i + 1].focus();\n                    }\n                  }\n                }}\n                onPaste={(event) => {\n                  const paste = event.clipboardData.getData('text');\n                  const pasteArray = paste.split('');\n\n                  if (pasteArray.length !== 6) {\n                    return;\n                  }\n\n                  let valid = true;\n\n                  pasteArray.forEach((x) => {\n                    if (!Number.isInteger(parseInt(x, 10))) {\n                      valid = false;\n                    }\n                  });\n\n                  if (valid) {\n                    setFieldValue('code', pasteArray);\n                    itemsRef.current[5].focus();\n                  }\n                }}\n                value={values.code[i]}\n                sx={{\n                  display: 'inline-block',\n                  textAlign: 'center',\n                  '& .MuiInputBase-input': {\n                    textAlign: 'center'\n                  }\n                }}\n                variant=\"outlined\"\n              />\n            ))}\n          </Box>\n          {\n            Boolean(\n              Array.isArray(touched.code)\n              && touched.code.length === 6\n              && errors.code\n            ) && (\n              <FormHelperText\n                error\n                sx={{ mx: '14px' }}\n              >\n                {Array.isArray(errors.code) && errors.code.find((x) => x !== undefined)}\n              </FormHelperText>\n            )\n          }\n          {errors.submit && (\n            <Box sx={{ mt: 3 }}>\n              <FormHelperText error>\n                {errors.submit}\n              </FormHelperText>\n            </Box>\n          )}\n          <Box sx={{ mt: 3 }}>\n            <Button\n              color=\"primary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Verify\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default VerifyCodeAmplify;\n","import type { FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Container,\n  Divider,\n  Link,\n  Typography\n} from '@material-ui/core';\nimport { VerifyCodeAmplify } from '../../components/authentication/verify-code';\nimport useAuth from '../../hooks/useAuth';\n\nconst VerifyCode: FC = () => {\n  const { platform } = useAuth() as any;\n\n  return (\n    <>\n      <Helmet>\n        <title>Verify Code | Material Kit Pro</title>\n      </Helmet>\n      <Box\n        sx={{\n          backgroundColor: 'background.default',\n          display: 'flex',\n          flexDirection: 'column',\n          minHeight: '100vh'\n        }}\n      >\n        <Container\n          maxWidth=\"sm\"\n          sx={{ py: 10 }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'center',\n              mb: 8\n            }}\n          />\n          <Card sx={{ background: 'none !important', boxShadow: 'none !important' }}>\n            <CardContent\n              sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                p: 4\n              }}\n            >\n              <Box\n                sx={{\n                  alignItems: 'center',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  mb: 3\n                }}\n              >\n                <div>\n                  <Typography\n                    color=\"textPrimary\"\n                    gutterBottom\n                    variant=\"h4\"\n                  >\n                    Verify Code\n                  </Typography>\n                  <Typography\n                    color=\"textSecondary\"\n                    variant=\"body2\"\n                  >\n                    Confirm registration using your verification code\n                  </Typography>\n                </div>\n                <Box\n                  sx={{\n                    height: 32,\n                    '& > img': {\n                      maxHeight: '100%',\n                      width: 'auto'\n                    }\n                  }}\n                />\n              </Box>\n              <Box\n                sx={{\n                  flexGrow: 1,\n                  mt: 3\n                }}\n              >\n                {platform === 'Amplify' && <VerifyCodeAmplify />}\n              </Box>\n              <Divider sx={{ my: 3 }} />\n              {platform === 'Amplify' && (\n                <Link\n                  color=\"textSecondary\"\n                  component={RouterLink}\n                  to=\"/authentication/password-recovery\"\n                  variant=\"body2\"\n                >\n                  Did you not receive the code?\n                </Link>\n              )}\n            </CardContent>\n          </Card>\n        </Container>\n      </Box>\n    </>\n  );\n};\n\nexport default VerifyCode;\n"],"sourceRoot":""}